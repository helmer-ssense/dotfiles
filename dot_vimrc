let g:coc_global_extensions = [
      \ 'coc-json',
      \ 'coc-tsserver',
      \ 'coc-yaml',
      \ 'coc-lists',
      \ 'coc-eslint'
      \]

" VimPlug
call plug#begin()

Plug 'APZelos/blamer.nvim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'digitaltoad/vim-pug'
Plug 'embark-theme/vim', { 'as': 'embark' }
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'jiangmiao/auto-pairs'
Plug 'jxnblk/vim-mdx-js'
Plug 'kevinoid/vim-jsonc'
Plug 'kshenoy/vim-signature'
Plug 'liuchengxu/vim-which-key'
Plug 'machakann/vim-highlightedyank'
Plug 'ntpeters/vim-better-whitespace'
Plug 'preservim/nerdcommenter'
Plug 'sheerun/vim-polyglot'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'easymotion/vim-easymotion'
Plug 'github/copilot.vim'
Plug 'alker0/chezmoi.vim'
Plug 'antoinemadec/coc-fzf'
Plug 'neoclide/coc.nvim', {'branch': 'release', 'do': { -> coc#util#install() }}
Plug 'jparise/vim-graphql'
Plug 'leafgarland/typescript-vim'
Plug 'maxmellon/vim-jsx-pretty'
Plug 'pangloss/vim-javascript'
Plug 'peitalin/vim-jsx-typescript'

" Themes
Plug 'sainnhe/sonokai'
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'NLKNguyen/papercolor-theme'
Plug 'sonph/onehalf', { 'rtp': 'vim' }
" NERDTree file sidebar
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
" Icons for NERDTree
Plug 'ryanoasis/vim-devicons'
" FZF, file and text search
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
" Airline Bar + Themes
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" Theme Catpuccin
Plug 'catppuccin/vim', { 'as': 'catppuccin' }
" Git
Plug 'mhinz/vim-signify'

call plug#end()

if &term =~ '256color'
  " disable Background Color Erase (BCE) so that color schemes
  " render properly when inside 256-color tmux and GNU screen.
  " see also http://snk.tuxfamily.org/log/vim-256color-bce.html
  set t_ut=
endif

" Imports "{{{
" ---------------------------------------------------------------------
if has("gui_running")
  " Gvim
  if has("gui_gtk2") || has("gui_gtk3")
    " Linux GUI
  elseif has("gui_win32")
    " Win32/64 GVim
  elseif has("gui_macvim")
    set macligatures
  else
    echo "Unknown GUI system!!!!"
  endif
else
  " Terminal vim
endif
"}}}


filetype plugin indent on
set autoread                    "Reload files changed outside vim
set encoding=UTF-8
set expandtab
set guioptions-=L
set guioptions-=R
set guioptions-=l
set guioptions-=r
set guioptions=
set laststatus=2                "Necesary for Vim Lightline Bar
set linespace=2
set number relativenumber
set shiftwidth=2
set tabstop=2
set nocompatible
set autoindent
set smarttab
set ai
set si
set nowrap
set path+=**
set wildignore+=*/node_modules/*
set iskeyword-=_
" Set leader to space
nnoremap <Space> <Nop>
let mapleader=" "
" Split mapping
set splitbelow
set splitright


if !exists('g:syntax_on')
	syntax enable
endif
if exists("g:loaded_webdevicons")
	call webdevicons#refresh()
endif

" Add asterisks in block comments
set formatoptions+=r

" For color schemes
if has('termguicolors')
  hi LineNr ctermbg=NONE guibg=NONE
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Quick save
nmap <leader>w :w!<cr>

nmap <leader>qq :q!<cr>

" Open terminal
nmap <leader>ft :term<cr>

" Toggle relative numbers
nmap <leader>uL :set rnu!<cr>

" Toggle soft wrap
nmap <leader>uw :set wrap!<cr>

" Source Vim configuration file and install plugins
nnoremap <silent><leader>9 :source ~/.vimrc<CR>

" Movement maps
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Tab maps
map <leader><tab>x :tabclose<cr>

" Double jj for Esc
imap jj <Esc>

" Custom original vim file
source ~/.ovimrc

" COC - Autocompletion
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
inoremap <silent><expr> <C-x><C-z> coc#pum#visible() ? coc#pum#stop() : "\<C-x>\<C-z>"
" remap for complete to use tab and <cr>
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-i> coc#refresh()

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> [e <Plug>(coc-diagnostic-prev)
nmap <silent> ]e <Plug>(coc-diagnostic-next)
nmap <leader>r <Plug>(coc-rename)

nnoremap <leader>ss :CocFzfList outline<cr>

" NERDTree settings
" Nerd show hidden files
let NERDTreeShowHidden = 1
let NERDTreeQuitOnOpen = 0
let NERDTreeMapOpenInTab = 't'
let NERDTreeMapOpenVSplit = 'S'
let NERDTreeMapOpenSplit = 's'

map <leader>e :NERDTreeToggle<cr>
map <leader>E :NERDTreeFind<cr>

" Surround remaps
nmap gzd <Plug>DSurround
nmap gzr <Plug>CSurround
nmap gza <Plug>YSurround
vmap gzd <Plug>DSurround

" Fzf config
" Search files
map <leader>ff :Files<cr>
" Change between buffers
nmap <leader>, :Buffers<cr>
" Search text in all files
map <leader>/ :Ag<cr>
" Search in file
map <Leader>sb :BLines<cr>
" Search in marks
nmap <Leader>sm :Marks<cr>
" Search in all commands
nmap <Leader>: :Commands<cr>
" Open Git in browser
map <Leader>gb :GBrowse<cr>

" Easy motion
nmap s <Plug>(easymotion-f)
nmap S <Plug>(easymotion-F)

" Airline bar config
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#formatter='unique_tail_improved'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#show_buffers = 0

" NERDTree hide root
augroup nerdtreehidecwd
  autocmd!
  autocmd FileType nerdtree setlocal conceallevel=3 | syntax match NERDTreeHideCWD #^[</].*$# conceal
augroup end

" Open NERDTree when there is a new tab
autocmd BufWinEnter * NERDTreeMirror

" Extra config
" JSX - TSX support
" set filetypes as typescriptreact
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescriptreact

" Helps with remembering commands
nnoremap <silent> <leader> :WhichKey '\'<CR>
vnoremap <silent> <leader> :WhichKeyVisual '\'<CR>

set grepprg=rg\ --vimgrep\ --smart-case\ --follow
let g:rg_derive_root='true'
" Start NERDTree when Vim is started without file arguments.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists('s:std_in') | NERDTree | endif

